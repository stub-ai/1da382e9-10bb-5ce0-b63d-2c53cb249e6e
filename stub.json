{"config":{"system_prompt":"","model":"","temperature":0,"top_p":1,"framework":"nextjs-page-tailwind"},"prompts":[{"prompt":"1. Initialize the UI with a dashboard component layout. Part 1 should be in the right column, containing 'Add' and 'Shop' buttons with black text. Part 2, also in the right column, should display user information, level, and points. Part 3 should include a divider. Part 4 should be a rectangular table for the task list, designed to ensure a seamless interface.","md5":"891c5bf35356bb21729b214bbc8f29b5"},{"prompt":"2. Inside the rectangular table, design each task item UI with the task title in black text, status, points, due date, and edit/delete buttons. These should be integrated with the task object to ensure a smooth user experience. Use a subtle UI design under each respective task.","md5":"8eabc1390467d58673fd786c3170171a"},{"prompt":"3. Create a dialog for the 'Add' button. This should be a task creation dialog with form fields for title, description, date, status, and points, mapping to the corresponding task object attributes for consistent state representation.","md5":"16a7a1e0fcaca6bf8986090b730d5f8f"},{"prompt":"4. Craft a Shop dialog for the 'Shop' button. This should list items with prices and a buy button, tying purchasable items to user points.","md5":"e3fb4a5fe94d358d851ce44b86de30e0"},{"prompt":"5. Initialize state variables: taskArray (to maintain tasks and subtasks) and userInfo (points, level) for handling state management and direct binding between UI and data.","md5":"64db9612a0e583a60e54bace3558d58d"},{"prompt":"6. Structure the task object with attributes: task ID, title, description, date, status, subtasks, points, and the subtask object with ID, title, points. Also, structure the user state object with level and points to standardize data structure and ensure uniform state representation.","md5":"fb95d1c42628e50ef35467665ba726bd"},{"prompt":"7. Define the function for the 'Add' button to trigger the task form dialog. The Submit button should create a new taskObject, update the taskArray, and close the dialog. The Edit button should open the dialog, populating it with existing task data, and the submit action should edit the task in the taskArray. The Delete button should trigger a dialog confirmation and remove the task from the taskArray, coupled to each related UI for complete functionality.","md5":"46acd8aa9f9f2e65299219b370c1e9dc"},{"prompt":"8. Implement a task status function to automatically update user points and level upon task completion. Link this to the task object to reflect updated points on the UI.","md5":"ca7506eefe12337d77b9a62669a94a94"},{"prompt":"9. Implement a points-to-level conversion function. Level up the user when points reach a certain threshold, adjusting the user's level based on accumulated points.","md5":"6e112145c3cc8ffaed7a39eeff5e0690"}]}